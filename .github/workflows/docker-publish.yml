name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
      - 2023

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  DOCKER_REPO: index.docker.io/crossany/crossany

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    # test after pushing image.
    needs: push

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          # Change all uppercase to lowercase
          DOCKER_REPO=$(echo $DOCKER_REPO | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          DOCKER_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$DOCKER_TAG" == "main" ] && DOCKER_TAG=latest

          echo DOCKER_REPO=$DOCKER_REPO
          echo DOCKER_TAG=$DOCKER_TAG

          docker pull $DOCKER_REPO:$DOCKER_TAG

  # Push base image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[push]')

    steps:
      - uses: actions/checkout@v2

      - name: clean config
        run:  git config  --unset http.https://github.com/.extraheader

      - name: Build image
        run:  docker build . --file Dockerfile --tag $DOCKER_REPO

      - name: Log into Docker Hub Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.HUB_PASSWORD }}" | docker login -u ${{ secrets.HUB_ACCOUNT }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          # Change all uppercase to lowercase
          DOCKER_REPO=$(echo $DOCKER_REPO | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          DOCKER_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$DOCKER_TAG" == "main" ] && DOCKER_TAG=latest

          echo DOCKER_REPO=$DOCKER_REPO
          echo DOCKER_TAG=$DOCKER_TAG

          docker tag $DOCKER_REPO $DOCKER_REPO:$DOCKER_TAG
          docker push $DOCKER_REPO:$DOCKER_TAG
          SNAPSHOT_TAG=$DOCKER_TAG  #make a snap tag if it's latest
          if [ $DOCKER_TAG = "latest" ]; then
              SNAPSHOT_TAG=$(date "+%Y%m%d")
              docker tag $DOCKER_REPO:$DOCKER_TAG $DOCKER_REPO:$SNAPSHOT_TAG
              docker push $DOCKER_REPO:$SNAPSHOT_TAG
          fi
          #env IMAGE_NAME=$DOCKER_REPO:$DOCKER_TAG DOCKER_REPO=$DOCKER_REPO DOCKER_TAG=$DOCKER_TAG bash ./hooks/post_push

  push_mips64el:
    # test after pushing image.
    needs: push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.event.head_commit.message, '[push]') || contains(github.event.head_commit.message, '[push-mips64el]'))

    steps:
      - uses: actions/checkout@v2
      
      - name: Log into Docker Hub Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.HUB_PASSWORD }}" | docker login -u ${{ secrets.HUB_ACCOUNT }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          # Change all uppercase to lowercase
          DOCKER_REPO=$(echo $DOCKER_REPO | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          DOCKER_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$DOCKER_TAG" == "main" ] && DOCKER_TAG=latest

          env IMAGE_NAME=$DOCKER_REPO:$DOCKER_TAG DOCKER_REPO=$DOCKER_REPO DOCKER_TAG=$DOCKER_TAG bash ./hooks/build_arch mips64el-c17gcc10-linux-gnuabi64

  push_aarch64:
    # test after pushing image.
    needs: push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.event.head_commit.message, '[push]') || contains(github.event.head_commit.message, '[push-aarch64]'))

    steps:
      - uses: actions/checkout@v2
      
      - name: Log into Docker Hub Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.HUB_PASSWORD }}" | docker login -u ${{ secrets.HUB_ACCOUNT }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          # Change all uppercase to lowercase
          DOCKER_REPO=$(echo $DOCKER_REPO | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          DOCKER_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$DOCKER_TAG" == "main" ] && DOCKER_TAG=latest

          env IMAGE_NAME=$DOCKER_REPO:$DOCKER_TAG DOCKER_REPO=$DOCKER_REPO DOCKER_TAG=$DOCKER_TAG bash ./hooks/build_arch aarch64-c17gcc10-linux-gnu

  push_x86_64:
    # test after pushing image.
    needs: push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.event.head_commit.message, '[push]') || contains(github.event.head_commit.message, '[push-x86_64]'))

    steps:
      - uses: actions/checkout@v2
      
      - name: Log into Docker Hub Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.HUB_PASSWORD }}" | docker login -u ${{ secrets.HUB_ACCOUNT }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          # Change all uppercase to lowercase
          DOCKER_REPO=$(echo $DOCKER_REPO | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          DOCKER_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$DOCKER_TAG" == "main" ] && DOCKER_TAG=latest

          env IMAGE_NAME=$DOCKER_REPO:$DOCKER_TAG DOCKER_REPO=$DOCKER_REPO DOCKER_TAG=$DOCKER_TAG bash ./hooks/build_arch x86_64-c17gcc10-linux-gnu

  push_riscv64:
    # test after pushing image.
    needs: push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.event.head_commit.message, '[push]') || contains(github.event.head_commit.message, '[push-riscv64]'))

    steps:
      - uses: actions/checkout@v2
      
      - name: Log into Docker Hub Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.HUB_PASSWORD }}" | docker login -u ${{ secrets.HUB_ACCOUNT }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          # Change all uppercase to lowercase
          DOCKER_REPO=$(echo $DOCKER_REPO | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          DOCKER_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$DOCKER_TAG" == "main" ] && DOCKER_TAG=latest

          env IMAGE_NAME=$DOCKER_REPO:$DOCKER_TAG DOCKER_REPO=$DOCKER_REPO DOCKER_TAG=$DOCKER_TAG bash ./hooks/build_arch riscv64-c17gcc10-linux-gnu

          push_loongarch64:
            # test after pushing image.
            needs: push
            runs-on: ubuntu-latest
            if: github.event_name == 'push' && (contains(github.event.head_commit.message, '[push]') || contains(github.event.head_commit.message, '[push-riscv64]'))

            steps:
              - uses: actions/checkout@v2

              - name: Log into Docker Hub Registry
              # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
                run: echo "${{ secrets.HUB_PASSWORD }}" | docker login -u ${{ secrets.HUB_ACCOUNT }} --password-stdin

                - name: Push image to GitHub Container Registry
                run: |
                  # Change all uppercase to lowercase
                  DOCKER_REPO=$(echo $DOCKER_REPO | tr '[A-Z]' '[a-z]')

                  # Strip git ref prefix from version
                  DOCKER_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

                  # Use Docker `latest` tag convention
                  [ "$DOCKER_TAG" == "main" ] && DOCKER_TAG=latest

                  env IMAGE_NAME=$DOCKER_REPO:$DOCKER_TAG DOCKER_REPO=$DOCKER_REPO DOCKER_TAG=$DOCKER_TAG bash ./hooks/build_arch loongarch64-c17gcc10-linux-gnu
